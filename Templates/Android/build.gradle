apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"
    defaultConfig {
        applicationId "%TEMPLATE_UUID%"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode %VERSION_CODE%
        versionName "%VERSION_NAME%"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions { 
         checkReleaseBuilds false
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation project(path: ':classes')
}

task copyJava(type: Copy) {
    println "I'm copyJava task!"
    from "../../platform/android/java"
    into "src/main/java"
}


task copyAssets(type: Copy) {
    mustRunAfter("copyJava")
    println "I'm copyAssets task!"
    from "../../Assets"
    into "src/main/assets"
}

task deleteIOSFolder(type: Delete) {
    mustRunAfter("copyAssets")
    println "I'm deleteIOSFolder task!"
    delete 'src/main/assets/Data/DotNet/ios'
}

task deleteGameDLL(type: Delete) {
    mustRunAfter("deleteIOSFolder")
    println "I'm deleteGameDLL task!"
    delete 'src/main/assets/Data/DotNet/Game.dll'
}

task deleteGameDLLE(type: Delete) {
    println "I'm deleteGameDLLE task!"
    delete 'src/main/assets/Data/DotNet/Game.dlle'
}



tasks.register("dotnetBuildRelease")
{
    doFirst {
        exec {
            println "I'm dotnetBuildRelease task!"
            workingDir '../../'
            commandLine 'dotnet','build','--configuration','Release','-p:DefineConstants=_MOBILE_'
        } 
        exec {
            println "I'm dotnetResolveReferences task!"
            assert file("../../Intermediate/Game.dll").exists() 
            commandLine 'dotnet','../../tools/ReferenceAssemblyResolver/ReferenceAssemblyResolver.dll','--assembly','../../Intermediate/Game.dll' , '--output', 'src/main/assets/Data/DotNet/android' , '--search' , '../../libs/dotnet/urho/mobile/android,../../libs/dotnet/bcl/android/common'
        }
    }
}

tasks.register("dotnetBuildDebug")
{
    doFirst {
        exec {
            println "I'm dotnetBuildDebug task!"
            workingDir '../../'
            commandLine 'dotnet','build','--configuration','Debug','-p:DefineConstants=_MOBILE_'
        }
        exec {
            println "I'm dotnetResolveReferences task!"
            assert file("../../Intermediate/Game.dll").exists() 
            commandLine 'dotnet','../../tools/ReferenceAssemblyResolver/ReferenceAssemblyResolver.dll','--assembly','../../Intermediate/Game.dll' , '--output', 'src/main/assets/Data/DotNet/android' , '--search' , '../../libs/dotnet/urho/mobile/android,../../libs/dotnet/bcl/android/common'
        }
    }
}


tasks.register("dotnetEncrypt") {
    doFirst {
            exec {
                println "I'm dotnetEncrypt task!"
                commandLine '../../tools/UrhoEncription','../../Intermediate/Game.dll','./src/main/assets/Data/DotNet','../../script/encryption_key.txt'
            }
    }
}

task copyGameDLL(type: Copy) {
    mustRunAfter("dotnetBuildDebug")
    from("../../Intermediate/") {
        include "Game.dll"
    }
    into "src/main/assets/Data/DotNet"
    println "I'm copyGameDLL task!"
}


tasks.register("dotnetBundleRelease"){
    mustRunAfter('copyJava','copyAssets','deleteIOSFolder','deleteGameDLL','dotnetBuildRelease','dotnetEncrypt')
    dependsOn('bundleRelease','copyJava','copyAssets','deleteIOSFolder','deleteGameDLL','dotnetBuildRelease','dotnetEncrypt')
    println "I'm dotnetBundleRelease task!"
} 

tasks.register("dotnetBundleDebug") {
    mustRunAfter('copyJava','copyAssets','deleteIOSFolder','deleteGameDLLE','dotnetBuildDebug','copyGameDLL')
    dependsOn('bundleDebug','copyJava','copyAssets','deleteIOSFolder','deleteGameDLLE','dotnetBuildDebug','copyGameDLL')
    println "I'm DotnetBundleDebug task!"
        
}
 
